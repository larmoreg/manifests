apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: namespace-filter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: envoy.http_connection_manager
            subFilter:
              name: envoy.router
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.lua
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
          inlineCode: |
            function envoy_on_request(request_handle)
              function urldecode(s)
                s = s:gsub('+', ' ')
                     :gsub('%%(%x%x)', function(h)
                                         return string.char(tonumber(h, 16))
                                       end)
                return s
              end

              function parseurl(s)
                local ans = {}
                for k,v in s:gmatch('([^&=?]-)=([^&=?]+)' ) do
                  ans[ k ] = urldecode(v)
                end
                return ans
              end

              local headers = request_handle:headers()
              local path = headers:get(":path")
              local query_params = parseurl(path)
              local namespace = query_params["ns"]
              if namespace ~= nil then
                request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", "namespace", namespace)
              end
            end

            function envoy_on_response(response_handle)
              local meta = response_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.lua")
              if meta ~= nil then
                local namespace = meta["namespace"]
                if namespace ~= nil then
                  response_handle:headers():add("set-cookie", "kubeflow_namespace=" .. meta.namespace .. ";path=/")
                end
              end
            end
